trigger:
  branches:
    include:
      - main

pr:
  - main

pool: 'contabo'

variables:
  releaseBuild: '-c Release'
  debugBuild: '-c Release'
  solutionName: 'SourceFormatService.sln'

stages:
  - stage: Setup
    jobs:
      - job: env_vars
        displayName: Env variables
        steps:
          - script: |
              echo $PATH
              env | sort
      - job: dotcover_install
        displayName: Install dotCover
        steps:
          - script: |
              dotnet new tool-manifest
              dotnet tool install --local JetBrains.dotCover.GlobalTool
              dotnet tool install --local dotnet-sonarscanner

  - stage: Feature_branch
    condition: ne(variables['System.PullRequest.SourceBranch'], '')
    jobs:
      - job: sonar_scan
        displayName: Sonar scan
        steps:
          - script: |
              dotnet sonarscanner begin \
              /k:"Guards" \
              /d:sonar.host.url=$(sonar.host.url) \
              /d:sonar.login=$SONAR_LOGIN_NAME \
              /o:$(sonar.organization) \
              /s:../s/sonar.xml \
              /d:sonar.pullrequest.key=$(System.PullRequest.PullRequestNumber) \
              /d:sonar.pullrequest.branch=$(System.PullRequest.SourceBranch) \
              /d:sonar.pullrequest.base=main \
              /d:sonar.pullrequest.provider=GitHub \
              /d:sonar.pullrequest.github.repository=EncyclopediaGalactica/Guards
            env:
              SONAR_LOGIN_NAME: $(sonar.login)

      - job: restore_solution
        displayName: Restore solution
        dependsOn: sonar_scan
        steps:
          - script: dotnet restore $solutionName

      - job: build_solution
        displayName: Build solution
        dependsOn: restore_solution
        steps:
          - script: dotnet build $solutionName $debugBuild

      - job: test_solution
        displayName: Test and Coverage
        dependsOn: build_solution
        steps:
          - script: |
              dotnet dotcover test \
              --no-build \
              --dotCoverReportType=html           

      - job: sonar_end
        dependsOn: test_solution
        displayName: Sonar End
        steps:
          - script: |
              dotnet sonarscanner end /d:sonar.login=$(sonar.login)
            env:
              SONAR_LOGIN_NAME: $(sonar.login)

  - stage: Main_branch
    condition: and(eq(variables['System.PullRequest.SourceBranch'], ''), eq(variables['Build.SourceBranch'],'refs/heads/main'))
    jobs:

      - job: sonar_scan
        displayName: Sonar scan
        steps:
          - script: |
              dotnet sonarscanner begin \
              /k:"Guards" \
              /d:sonar.host.url=$(sonar.host.url) \
              /d:sonar.login=$SONAR_LOGIN_NAME \
              /o:$(sonar.organization) \
              /s:../s/sonar.xml \
              /d:sonar.pullrequest.provider=GitHub \
              /d:sonar.pullrequest.github.repository=EncyclopediaGalactica/Guards
            env:
              SONAR_LOGIN_NAME: $(sonar.login)

      - job: restore_solution
        displayName: Restore solution
        steps:
          - script: dotnet restore $solutionName

      - job: build_solution
        dependsOn: restore_solution
        displayName: Build solution
        steps:
          - script: dotnet build $solutionName $debugBuild

      - job: test_solution
        dependsOn: build_solution
        displayName: Test solution
        steps:
          - script: dotnet test $solutionName

      - job: install_semantic
        dependsOn: test_solution
        displayName: Install Semantic
        steps:
          - script: |
              echo '##vso[task.prependpath]$(HOME)/.local/bin'
            displayName: PATH
          - script: |
              npm install npm@6
            displayName: npm@6
          - script: |
              npm install semantic-release
            displayName: semantic-release
          - script: |
              npm install @semantic-release/changelog
            displayName: semantic-release/changelog
          - script: |
              npm install @semantic-release/exec
            displayName: semantic-release/exec
          - script: |
              npm install @semantic-release/git
            displayName: semantic-release/git
          - script: |
              npm install @semantic-release/github
            displayName: semantic-release/github
          - script: |
              pip3 install --user bump2version
            displayName: bump2version

      - job: semantic_release
        dependsOn: install_semantic
        displayName: Semantic Release
        steps:
          - script: |
              echo '##vso[task.prependpath]$(HOME)/.local/bin'
            displayName: PATH
          - script: |
              npx semantic-release
            displayName: semantic-release
            env:
              GH_TOKEN: $(githubToken)
              
      - job: sonar_end
        dependsOn: test_solution
        displayName: Sonar End
        steps:
          - script: |
              dotnet sonarscanner end /d:sonar.login=$(sonar.login)
            env:
              SONAR_LOGIN_NAME: $(sonar.login)

      - job: nuget
        dependsOn: semantic_release
        displayName: Nuget
        workspace:
          clean: all
        steps:
          - script: |
              dotnet pack Guards.csproj --configuration Release --include-symbols -p:NuspecFile=Guards.nuspec
            displayName: Nuget
            workingDirectory: src/Guards

          - script: |
              dotnet nuget push src/Guards/bin/Release/EncyclopediaGalactica.Guards.`cat version.txt`.nupkg \ 
              --api-key $NUGET_TOKEN \ 
              --source "https://nuget.pkg.github.com/EncyclopediaGalactica/index.json" \ 
              --skip-duplicate
            displayName: Publish Nuget
            env:
              GH_TOKEN: $(githubToken)
              USERNAME: $(githubUserName)
              NUGET_TOKEN: $(nugetToken)              
  